services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    volumes:
      - ./backend/src:/home/node/app/src
      - ./backend/tsconfig.json:/home/node/app/tsconfig.json
      - ./backend/nodemon.json:/home/node/app/nodemon.json
      - ./backend/prisma:/home/node/app/prisma
    ports:
      - 4000:3000
    depends_on:
      db:
        condition: service_healthy
    env_file: backend/.env
    command: sh -c "npx prisma generate && npx prisma migrate deploy && npm run dev"

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    volumes:
      - ./frontend/src:/home/node/app/src
      - ./frontend/public:/home/node/app/public
      - ./frontend/eslint.config.js:/home/node/app/eslint.config.js
      - ./frontend/index.html:/home/node/app/index.html
      - ./frontend/postcss.config.js:/home/node/app/postcss.config.js
      - ./frontend/tailwind.config.js:/home/node/app/tailwind.config.js
      - ./frontend/tsconfig.app.json:/home/node/app/tsconfig.app.json
      - ./frontend/tsconfig.node.json:/home/node/app/tsconfig.node.json
      - ./frontend/vite.config.ts:/home/node/app/vite.config.ts
    ports:
      - 3000:3000
    depends_on:
      db:
        condition: service_healthy
    env_file: frontend/.env

  db:
    image: postgres:14-alpine
    container_name: db-container
    ports:
      - "5432:5432"
    env_file: .env
    volumes: 
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.0-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5